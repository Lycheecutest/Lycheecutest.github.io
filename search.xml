<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>MybatisPlus笔记</title>
      <link href="/2022/03/04/MybatisPlus%E7%AC%94%E8%AE%B0/"/>
      <url>/2022/03/04/MybatisPlus%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>前提：使用IDEA + Maven + Spring（Spring Boot）</p><p>导入依赖：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">数据库驱动&lt;dependency&gt;    &lt;groupId&gt;mysql&lt;&#x2F;groupId&gt;    &lt;artifactId&gt;mysql-connector-java&lt;&#x2F;artifactId&gt;&lt;&#x2F;dependency&gt;&#x2F;**Lombok**&#x2F;&lt;dependency&gt;    &lt;groupId&gt;org.projectlombok&lt;&#x2F;groupId&gt;    &lt;artifactId&gt;lombok&lt;&#x2F;artifactId&gt;&lt;&#x2F;dependency&gt;&lt;dependency&gt;    &lt;groupId&gt;com.baomidou&lt;&#x2F;groupId&gt;    &lt;artifactId&gt;mybatis-plus-boot-starter&lt;&#x2F;artifactId&gt;    &lt;version&gt;3.0.5&lt;&#x2F;version&gt;&lt;&#x2F;dependency&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="配置日志"><a href="#配置日志" class="headerlink" title="配置日志"></a>配置日志</h4><p>使用MybatisPlus，所有的Sql语句是不可见的，想要看到Sql语句，必须配置日志。</p><p>配置日志：在application.yml文件中</p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml">mybatis-plus:   configuration:  log-impl: org.apache.ibatis.logging.stdout.StdOutImpl<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="CRUD扩展"><a href="#CRUD扩展" class="headerlink" title="CRUD扩展"></a>CRUD扩展</h4><p>基本的CRUD使用就是使用创建的Mapper对象，调用对应的方法即可</p><h5 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h5><p>数据库插入的id的默认值为：全局的默认唯一值</p><p>主键生成策略： 雪花算法</p><pre class="line-numbers language-java@TableId" data-language="java@TableId"><code class="language-java@TableId">@TableId()&#x2F;**ID_WORKER  全局唯一id  默认值**&#x2F;IdType&#123;AUTP(0),    &#x2F;&#x2F;数据库id自增NONE(1),    &#x2F;&#x2F; 未设置INPUT(2),   &#x2F;&#x2F; 手动输入ID_WORKER(3),&#x2F;&#x2F;默认的全局唯一idUUID(4),     &#x2F;&#x2F;全局唯一id uuidID_WORKER_STR(5); &#x2F;&#x2F;ID_WORKER 字符串表示法&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>主键自增：</strong></p></blockquote><p>配置主键自增：</p><ol><li>实体类字段上 @TableId(type &#x3D; IdType.AUTO)</li><li><strong>数据库字段一定要是自增！</strong></li></ol><h5 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h5><p>Mapper.updateById(参数是数据对象、不止是Id)</p><p>所有Sql都是自动动态配置</p><h4 id="自动填充"><a href="#自动填充" class="headerlink" title="自动填充"></a>自动填充</h4><p>创建时间、修改时间！这些个操作一般都是自动化完成的，不希望手动更新</p><h6 id="方式一：数据库级别（工作中不允许修改数据库）"><a href="#方式一：数据库级别（工作中不允许修改数据库）" class="headerlink" title="方式一：数据库级别（工作中不允许修改数据库）"></a>方式一：数据库级别（工作中不允许修改数据库）</h6><ol><li>在表中新增字段 <code>create_time</code> 、<code>updatetime</code> </li><li>再次测试，实体类同步属性</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java">private Date createTime;private Date updateTime;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>Ps:</strong> </p><ol><li>默认值：CURRENT_TIMESTAMP</li><li>更新操作，勾选更新</li></ol><h6 id="方式二：代码级别"><a href="#方式二：代码级别" class="headerlink" title="方式二：代码级别"></a>方式二：代码级别</h6><ol><li>删除数据库的默认值、更新操作</li><li>实体类字段属性上需要增加注解</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java">@TableField(fill &#x3D; FieldFill.INSERT)  创建时间  private Date createTime;@TableField(fill &#x3D; FieldFill.INSERT_UPDATE)  更新时间  private Date updateTime;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>编写处理器</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Slf4j@Componentpublic class MyMetaObjectHandler implements MetaObjectHandler &#123;    @Override    public void insertFill(MetaObject metaObject) &#123;        log.info(&quot;start insert fill ....&quot;);        this.strictInsertFill(metaObject, &quot;createTime&quot;, LocalDateTime.class, LocalDateTime.now()); &#x2F;&#x2F; 起始版本 3.3.0(推荐使用)        &#x2F;&#x2F; 或者        this.strictInsertFill(metaObject, &quot;createTime&quot;, () -&gt; LocalDateTime.now(), LocalDateTime.class); &#x2F;&#x2F; 起始版本 3.3.3(推荐)    &#125;    @Override    public void updateFill(MetaObject metaObject) &#123;        log.info(&quot;start update fill ....&quot;);        this.strictUpdateFill(metaObject, &quot;updateTime&quot;, LocalDateTime.class, LocalDateTime.now()); &#x2F;&#x2F; 起始版本 3.3.0(推荐)        &#x2F;&#x2F; 或者        this.strictUpdateFill(metaObject, &quot;updateTime&quot;, () -&gt; LocalDateTime.now(), LocalDateTime.class); &#x2F;&#x2F; 起始版本 3.3.3(推荐)    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="乐观锁"><a href="#乐观锁" class="headerlink" title="乐观锁"></a>乐观锁</h4><h4 id="逻辑删除"><a href="#逻辑删除" class="headerlink" title="逻辑删除"></a>逻辑删除</h4>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> Mybatis-plus </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>力扣</title>
      <link href="/2022/03/03/%E5%8A%9B%E6%89%A3/"/>
      <url>/2022/03/03/%E5%8A%9B%E6%89%A3/</url>
      
        <content type="html"><![CDATA[<h3 id="判断字符串是否唯一"><a href="#判断字符串是否唯一" class="headerlink" title="判断字符串是否唯一"></a>判断字符串是否唯一</h3><p>实现一个算法，确定一个字符串 <code>s</code> 的所有字符是否全都不同。</p><p>限制：</p><ul><li>0 &lt;&#x3D; len &lt;&#x3D; 100</li><li>可以考虑不使用额外的数据结构</li></ul><ol><li>使用双重循环</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java">public boolean isUnique(String astr) &#123;    if(astr.length() &gt; 26) return false;        for(int i &#x3D; 0; i &lt; astr.length(); i++)&#123;        for(int j &#x3D; i + 1; j &lt; astr.length(); j++)&#123;            if(asrt.charAt(i) &#x3D;&#x3D; astr.charAt(j)) return false;        &#125;    &#125;    return true;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><ol start="2"><li>用数组记录出现过的字符</li></ol>  <pre class="line-numbers language-java" data-language="java"><code class="language-java">    public boolean isUnique(String astr) &#123;        astr.toLowerCase();        int[] str &#x3D; new int[28];        for (int i &#x3D; 0; i&lt; astr.length(); i++)&#123;            int var &#x3D; astr.charAt(i) -&#39;a&#39;;            if(str[var] &#x3D;&#x3D; 0) str[var] &#x3D; 1;            else return false;        &#125;        return true;    &#125;&#x2F;** 使用了toLowerCase()后，字符全部变成小写，使用后无法获得原字符串**&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><ol start="3"><li>使用位运算，拿一个整数记录出现过的字符</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java">public boolean isUnique(String astr) &#123;int hash &#x3D; 0;    for(char ch: astr.toCharArray())&#123;        int index &#x3D; &#39;ch&#39; - a;        if(hash &amp; (1 &lt;&lt; index) !&#x3D; 0)&#123;            return false;        &#125;else hash |&#x3D; (1 &lt;&lt; index);    &#125;    return true;&#125;&#x2F;** 问题： 如果字符包括大小写，int是32位的，就会存不下，如果字符的范围扩大到ASCII表，该方法就无法使用了**&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h4><ol><li>Java中String类型是引用类型，不能像Char数组那样直接用下标去取出对应的字符。</li><li>String类型的两个常用方法： <code>char[ ] toCharyArray()</code> ，String对象调用该方法后，返回一个字符数组。  <code>char charAt(int index)</code> ，String对象调用该方法后，返回对应下标的字符。</li></ol><h3 id="判断是否互为字符重排"><a href="#判断是否互为字符重排" class="headerlink" title="判断是否互为字符重排"></a>判断是否互为字符重排</h3><p>给定两个字符串 <code>s1</code> 和 <code>s2</code>，请编写一个程序，确定其中一个字符串的字符重新排列后，能否变成另一个字符串。</p><p>说明：</p><ul><li>0 &lt;&#x3D; len(s1) &lt;&#x3D; 100</li><li>0 &lt;&#x3D; len(s2) &lt;&#x3D; 100</li></ul><ol><li>对两个字符串进行排序后一个一个进行比对</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java">    public boolean CheckPermutation(String s1, String s2) &#123;        if(s1.length() !&#x3D; s2.length()) return false;        char[] chars1 &#x3D; s1.toCharArray();        char[] chars2 &#x3D; s2.toCharArray();        Arrays.sort(chars1);        Arrays.sort(chars2);        for(int i &#x3D; 0; i&lt; s1.length(); i++)&#123;            if(chars1[i] !&#x3D; chars2[i]) return false;        &#125;        return  true;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>可以不用排序，直接使用<code>Arrays.equals(s1,s2)</code>判断两个字符数组是否相等</strong></p><hr><ol start="2"><li>用Ascii码来比较，当两个字符串长度相等，所有字符的ASCII码相等，那么两个字符串就互为字符重排</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"> public boolean CheckPermutation(String s1, String s2) &#123;        int sum1 &#x3D; 0;        int sum2 &#x3D; 0;        if(s1.length() !&#x3D; s2.length()) return false;        else&#123;            for(int i&#x3D;0; i&lt;s1.length(); i++)&#123;                sum1 +&#x3D; s1.charAt(i);                sum2 +&#x3D; s2.charAt(i);            &#125;        &#125;        return (sum1 &#x3D;&#x3D; sum2);     &#125;&#x2F;**如果出现 ac 和 bb那么两个字符数组的Ascii值是一样，但是不是互为字符重排。所以该方法不对**&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="收获-1"><a href="#收获-1" class="headerlink" title="收获"></a>收获</h4><ul><li>Arrays工具类的使用</li></ul><h3 id="URL化"><a href="#URL化" class="headerlink" title="URL化"></a>URL化</h3><p>URL化。编写一种方法，将字符串中的空格全部替换为<code>%20</code>。假定该字符串尾部有足够的空间存放新增字符，并且知道字符串的“真实”长度。（注：用<code>Java</code>实现的话，请使用字符数组实现，以便直接在数组上操作。）</p><p>提示：</p><ul><li>字符串长度在[0,500000]范围内。</li></ul><p>一、遍历字符串，遇到空格替换成”%20”</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">    public String replaceSpaces(String S, int length) &#123;        StringBuffer sb &#x3D; new StringBuffer();        for(int i&#x3D;0; i&lt;length; i++)&#123;            if(S.charAt(i) &#x3D;&#x3D; &#39; &#39;)&#123;                sb.append(&quot;%20&quot;);            &#125;else&#123;                sb.append(S.charAt(i));            &#125;        &#125;        return sb.toString();    &#125;这里不能用String类型去存储新的字符串，因为String类型是无法改变的，每次改变字符串就是创建一个新的字符串，会花费很多的时间。如果需要对字符串进行多次修改，需要使用StringBuffer&amp;StringBuilder类<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 刷题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基本数据类型</title>
      <link href="/2022/03/03/Java%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
      <url>/2022/03/03/Java%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<p>Java的两大数据类型</p><ul><li>内置数据类型</li><li>引用数据类型</li></ul><h3 id="内置数据类型"><a href="#内置数据类型" class="headerlink" title="内置数据类型"></a>内置数据类型</h3><h4 id="byte"><a href="#byte" class="headerlink" title="byte"></a>byte</h4><ul><li>该数据类型是8位的、有符号的，以二进制补码表示的整数；</li><li>最小值是-128（-2^7^）、最大值是127（2^7^-1)、默认值是0；</li><li>用在大型数组中节约空间，主要代替整数，因为 byte 变量占用的空间只有 int 类型的四分之一；</li><li>Byte</li></ul><h4 id="short"><a href="#short" class="headerlink" title="short"></a>short</h4><ul><li>该数据类型是16位、有符号的，以二进制补码表示的整数;</li><li>最小值是 -32768（-2^15^) 、最大值是 32767（2^15^ - 1)、默认值是0；</li><li>short变量是int型变量所占空间的二分之一；</li><li>Short</li></ul><h4 id="Int"><a href="#Int" class="headerlink" title="Int"></a>Int</h4><ul><li>int数据类型是32位，有符号的，以二进制补码表示的整数；</li><li>最小值是 -2^31^ 、最大值是 2^31^ - 1、默认值是0；</li><li>一般的整型变量默认是int类型；</li><li>Integer</li></ul><h4 id="long"><a href="#long" class="headerlink" title="long"></a>long</h4><ul><li>long数据类型是64位、有符号的，以二进制补码表示的整数；</li><li>最小值-2^63^、最大值2^63^-1，默认值是0L；</li><li>使用long型最好在数据结尾加上L，可以使用小写l。但是l容易与数字1混淆；</li><li>Long</li></ul><h4 id="float"><a href="#float" class="headerlink" title="float"></a>float</h4><ul><li>该数据类型是单精度、32位、符合IEEE754标准的浮点数；</li><li>默认值是0.0f；</li><li>浮点数不能用来表示精确的值，如货币；</li><li>Float</li></ul><h4 id="double"><a href="#double" class="headerlink" title="double"></a>double</h4><ul><li>双精度、64位、符合IEEE754标准的浮点数；</li><li>浮点数的默认类型为double类型；</li><li>默认值是0.0d；</li><li>Double</li></ul><h4 id="boolean"><a href="#boolean" class="headerlink" title="boolean"></a>boolean</h4><ul><li>数据类型表示一位的信息；</li><li>只有两个取值，true和false；</li><li>默认值是false；</li></ul><h4 id="char"><a href="#char" class="headerlink" title="char"></a>char</h4><ul><li>是一个单一的16位Unicode字符；</li><li>char类型可以存储任何字符；</li><li>Character</li></ul><h3 id="引用类型"><a href="#引用类型" class="headerlink" title="引用类型"></a>引用类型</h3><p>在Java中，引用类型的变量非常类似于C&#x2F;C++的指针。引用类型指向一个对象，指向对象的变量是引用变量。这些变量在声明时被指定为一个特定的类型，比如 Employee、Puppy 等。变量一旦声明后，类型就不能被改变了。</p><ul><li>对象、数组都是引用数据类型。</li><li>所有引用类型的默认值都是null。</li><li>一个引用变量可以用来引用任何与之兼容的类型。</li></ul><h3 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h3><p>Java中使用final关键字来修饰常量，声明方式和变量类似。</p><blockquote><p>final double Pi &#x3D; 3.1415926535;</p></blockquote><p>和其他语言一样，Java的字符串常量也是包含在两个引号之间的字符序列。</p><p>字符串常量和字符常量都可以包含任何Unicode字符。</p><h3 id="自动类型转换"><a href="#自动类型转换" class="headerlink" title="自动类型转换"></a>自动类型转换</h3><p><strong>整型、实型（常量）、字符型数据可以混合运算。运算中，不同类型的数据先转化为同一类型，然后进行运算。</strong></p><p>转换从低级到高级</p><blockquote><p>低————————————————————–&gt;高</p><p>byte、short、char-&gt; int -&gt; long -&gt; float -&gt; double</p></blockquote><p>数据类型转换必须满足如下规则：</p><ol><li><p>不能对boolean类型进行类型转换。</p></li><li><p>不能把对象类型转换成不相关类的对象。</p></li><li><p>在把容量大的类型转换为容量小的类型时必须使用强制类型转换。</p></li><li><p>转换过程中可能导致溢出或损失精度。</p></li></ol><h4 id="自动类型转换-1"><a href="#自动类型转换-1" class="headerlink" title="自动类型转换"></a>自动类型转换</h4><p>必须满足转换前的数据类型的位数要低于转换后的数据类型，例如: short数据类型的位数为16位，就可以自动转换位数为32的int类型，同样float数据类型的位数为32，可以自动转换为64位的double类型。</p><h4 id="强制类型转换"><a href="#强制类型转换" class="headerlink" title="强制类型转换"></a>强制类型转换</h4><ol><li>条件是转换的数据类型必须是兼容的。</li><li>(type) value type是要强制类型转换后的数据类型。</li></ol><h4 id="隐含强制类型转换"><a href="#隐含强制类型转换" class="headerlink" title="隐含强制类型转换"></a>隐含强制类型转换</h4><ol><li>整数的默认类型都是int。</li><li>浮点型不存在这种情况，因为定义在float类型时必须在数字后面跟上F或者f。</li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaSE </tag>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java语法规范</title>
      <link href="/2022/03/03/Java%E8%AF%AD%E6%B3%95%E8%A7%84%E8%8C%83/"/>
      <url>/2022/03/03/Java%E8%AF%AD%E6%B3%95%E8%A7%84%E8%8C%83/</url>
      
        <content type="html"><![CDATA[<h4 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h4><ol><li><strong>大小写敏感</strong>：标识符Hello和hello是不同的。</li><li><strong>类名</strong>：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组成，那么每个单词的首字母应该大写，例如：FirstDemo。</li><li><strong>方法名</strong>：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。</li><li><strong>源文件名</strong>：源文件名必须和类名相同。当保存文件的时候，应该使用类名作为文件名保存，文件名的后缀是.java。</li><li>主方法入口：所有的Java程序由 public static void mian(String args[])方法开始执行。</li></ol><h4 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h4><p><strong>Java所有的组成部分都需要名字。类名、变量名、以及方法名都被称为标识符。</strong></p><ul><li>所有的标识符都应该以**字母、$、_ **  开头</li><li>首字符之后可以是<strong>字母、$、_ 、或数字</strong>的任何组合</li><li><a href="#q1">关键字</a>不能用做标识符</li><li>标识符是大小写敏感的</li></ul><h4 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h4><p>Java可以用修饰符来修饰类中的方法和属性。主要由两类修饰符：</p><ul><li>访问控制修饰符：default、public、protected、private</li><li>非访问控制修饰符：final、abstract、static、synchronized</li></ul><h4 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h4><p>Java 5.0引入了枚举，枚举限制变量只能是预先设定好的值。使用枚举可以减少代码中的 bug。</p><p>例如，我们为果汁店设计一个程序，它将限制果汁为小杯、中杯、大杯。这就意味着它不允许顾客点除了这三种尺寸外的果汁。</p><h4 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h4><p><a id="q1"></a></p><p>这些关键字不能用于常量、变量、和任何标识符的名称。</p><table><thead><tr><th align="center"></th><th align="center"></th><th align="center"></th></tr></thead><tbody><tr><td align="center">类别</td><td align="center">关键字</td><td align="center">说明</td></tr><tr><td align="center">访问控制</td><td align="center">private</td><td align="center">私有的</td></tr><tr><td align="center">protected</td><td align="center">受保护的</td><td align="center"></td></tr><tr><td align="center">public</td><td align="center">公共的</td><td align="center"></td></tr><tr><td align="center">类、方法和变量修饰符</td><td align="center">abstract</td><td align="center">声明抽象</td></tr><tr><td align="center">class</td><td align="center">类</td><td align="center"></td></tr><tr><td align="center">extends</td><td align="center">扩充,继承</td><td align="center"></td></tr><tr><td align="center">final</td><td align="center">最终值,不可改变的</td><td align="center"></td></tr><tr><td align="center">implements</td><td align="center">实现（接口）</td><td align="center"></td></tr><tr><td align="center">interface</td><td align="center">接口</td><td align="center"></td></tr><tr><td align="center">native</td><td align="center">本地，原生方法（非 Java 实现）</td><td align="center"></td></tr><tr><td align="center">new</td><td align="center">新,创建</td><td align="center"></td></tr><tr><td align="center">static</td><td align="center">静态</td><td align="center"></td></tr><tr><td align="center">strictfp</td><td align="center">严格,精准</td><td align="center"></td></tr><tr><td align="center">synchronized</td><td align="center">线程,同步</td><td align="center"></td></tr><tr><td align="center">transient</td><td align="center">短暂</td><td align="center"></td></tr><tr><td align="center">volatile</td><td align="center">易失</td><td align="center"></td></tr><tr><td align="center">程序控制语句</td><td align="center">break</td><td align="center">跳出循环</td></tr><tr><td align="center">case</td><td align="center">定义一个值以供 switch 选择</td><td align="center"></td></tr><tr><td align="center">continue</td><td align="center">继续</td><td align="center"></td></tr><tr><td align="center">default</td><td align="center">默认</td><td align="center"></td></tr><tr><td align="center">do</td><td align="center">运行</td><td align="center"></td></tr><tr><td align="center">else</td><td align="center">否则</td><td align="center"></td></tr><tr><td align="center">for</td><td align="center">循环</td><td align="center"></td></tr><tr><td align="center">if</td><td align="center">如果</td><td align="center"></td></tr><tr><td align="center">instanceof</td><td align="center">实例</td><td align="center"></td></tr><tr><td align="center">return</td><td align="center">返回</td><td align="center"></td></tr><tr><td align="center">switch</td><td align="center">根据值选择执行</td><td align="center"></td></tr><tr><td align="center">while</td><td align="center">循环</td><td align="center"></td></tr><tr><td align="center">错误处理</td><td align="center">assert</td><td align="center">断言表达式是否为真</td></tr><tr><td align="center">catch</td><td align="center">捕捉异常</td><td align="center"></td></tr><tr><td align="center">finally</td><td align="center">有没有异常都执行</td><td align="center"></td></tr><tr><td align="center">throw</td><td align="center">抛出一个异常对象</td><td align="center"></td></tr><tr><td align="center">throws</td><td align="center">声明一个异常可能被抛出</td><td align="center"></td></tr><tr><td align="center">try</td><td align="center">捕获异常</td><td align="center"></td></tr><tr><td align="center">包相关</td><td align="center">import</td><td align="center">引入</td></tr><tr><td align="center">package</td><td align="center">包</td><td align="center"></td></tr><tr><td align="center">基本类型</td><td align="center">boolean</td><td align="center">布尔型</td></tr><tr><td align="center">byte</td><td align="center">字节型</td><td align="center"></td></tr><tr><td align="center">char</td><td align="center">字符型</td><td align="center"></td></tr><tr><td align="center">double</td><td align="center">双精度浮点</td><td align="center"></td></tr><tr><td align="center">float</td><td align="center">单精度浮点</td><td align="center"></td></tr><tr><td align="center">int</td><td align="center">整型</td><td align="center"></td></tr><tr><td align="center">long</td><td align="center">长整型</td><td align="center"></td></tr><tr><td align="center">short</td><td align="center">短整型</td><td align="center"></td></tr><tr><td align="center">变量引用</td><td align="center">super</td><td align="center">父类,超类</td></tr><tr><td align="center">this</td><td align="center">本类</td><td align="center"></td></tr><tr><td align="center">void</td><td align="center">无返回值</td><td align="center"></td></tr><tr><td align="center">保留关键字</td><td align="center">goto</td><td align="center">是关键字，但不能使用</td></tr><tr><td align="center">const</td><td align="center">是关键字，但不能使用</td><td align="center"></td></tr><tr><td align="center">null</td><td align="center">空</td><td align="center"></td></tr></tbody></table><h4 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h4><p>在 Java 中，一个类可以由其他类派生。如果你要创建一个类，而且已经存在一个类具有你所需要的属性或方法，那么你可以将新创建的类继承该类。</p><p>利用继承的方法，可以重用已存在类的方法和属性，而不用重写这些代码。被继承的类称为超类（super class），派生类称为子类（subclass）。</p><h4 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h4><p>在 Java 中，接口可理解为对象间相互通信的协议。接口在继承中扮演着很重要的角色。</p><p>接口只定义派生要用到的方法，但是方法的具体实现完全取决于派生类。</p><h4 id="源程序与编译型运行区别"><a href="#源程序与编译型运行区别" class="headerlink" title="源程序与编译型运行区别"></a>源程序与编译型运行区别</h4><p><img src="https://gitee.com/Lycheecutest/imgs/raw/master/blog/java1.png"></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaSE </tag>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>糖醋排骨</title>
      <link href="/2022/03/02/%E7%B3%96%E9%86%8B%E6%8E%92%E9%AA%A8/"/>
      <url>/2022/03/02/%E7%B3%96%E9%86%8B%E6%8E%92%E9%AA%A8/</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/Lycheecutest/imgs/raw/master/blog/food1.jpg" alt="糖醋排骨"></p><p>糖醋汁：料酒一勺、生抽一勺、老抽半勺、醋三勺、白糖半勺</p><ol><li><p>调个酱汁：料酒1勺+生抽1勺+老抽半勺+醋3勺+白糖半勺</p></li><li><p>排骨冷水下锅，放入葱姜料酒焯水，煮出血沫后捞出控干水分 </p></li><li><p>锅里少许油倒入排骨，煎至表皮金黄盛出，再放15颗冰糖炒至融化，倒入排骨翻拌均匀裹上糖色～</p></li><li><p>加水没过排骨，倒入料汁，中火闷煮30分钟后大火收汁，撒上芝麻即可～</p></li></ol><p><strong>收汁的时候，差不多了再淋上一圈醋</strong> (防止粘锅，烧焦，口感会好一些，不会很柴)</p>]]></content>
      
      
      <categories>
          
          <category> 食谱 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 糖醋 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo + Matery 搭建遇到的搜索不到的小问题</title>
      <link href="/2022/03/02/Hexo%E5%8D%9A%E5%AE%A2/"/>
      <url>/2022/03/02/Hexo%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>​    花费了几天时间用Hexo搭建了自己的博客，准备用来存放一些学习笔记、心得之类的 。然后使用了Matery主题美化，途中真的遇到了很多很多问题，有一些现在也没找到解决办法，暂时就存在这里。</p><p>遇到Bug会经常更新。</p><h4 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h4><h5 id="首页展示图"><a href="#首页展示图" class="headerlink" title="首页展示图"></a>首页展示图</h5><p>​    这个地方展示图片我试验了一下，好像有自适应大小，不用担心图片显示出现异常。比如说图片被拉伸什么，不过得考虑大小（<strong>指的是所占内存大小</strong>）吧。如果图片过大，你加载出来会非常的慢，如果你是部署到GitHub上，那就会遇到加载很久的情况。可以考虑做一个双部署，部署到GitHub上的同时也部署到Gitee（码云）上，访问速度会好很多。</p><h5 id="Pic-Go-Gitee图床"><a href="#Pic-Go-Gitee图床" class="headerlink" title="Pic Go+Gitee图床"></a>Pic Go+Gitee图床</h5><h6 id="图床上的图片显示不了"><a href="#图床上的图片显示不了" class="headerlink" title="图床上的图片显示不了"></a>图床上的图片显示不了</h6><p>​    我是按照网上搜索的教程搭建的一个图床，使用Gitee存储图片。遇到过上传的图片无法在博客里正常显示问题，去Pic Go查看图片也是无法显示图片。去网上搜索了很多，可能的原因是：</p><ol><li>路径出错了，你在md文档里引用的路径有问题。</li><li>图片格式问题。我目前正常显示的图片是.jpg格式、.png格式，还有其他格式还没有试过。上传的时候注意一下格式。</li><li>图片大小问题，如果图片过大，也是无法显示的。我目前能显示的最大的图片是3M左右。无法显示的图片在PicGo里的相册也是无法显示的，如下：</li></ol><p><img src="https://gitee.com/Lycheecutest/imgs/raw/master/blog/hexo1.jpg" alt="图片显示异常"></p><ol start="4"><li>gitee仓库容量有限制，注意自己剩余的存储空间。</li></ol><p><img src="https://gitee.com/Lycheecutest/imgs/raw/master/blog/hexo2.jpg" alt="gitee仓库配额"></p><h6 id="图床存储博客所有图片"><a href="#图床存储博客所有图片" class="headerlink" title="图床存储博客所有图片"></a>图床存储博客所有图片</h6><p>​    我目前使用图床能存储博客中拆入的图片、博客的特色图片、背景图。</p><p>博客的特色图片，使用的图床存储的时候，注意引用格式**img:  “一定要用双引号，还有 【:】后面有一个空格” **不然就会导致图片显示失败。</p><p>背景图，不是首页的展示图（banner）。是主题的配置文件里面的background。更换背景图片的时候，注意图片尺寸，这里的显示并没有自适应，你必须使用相对应的尺寸，不然图片会被拉长。Matery主题背景图的尺寸是2K(2560*1440)。</p><p>可以去网上去找一个在线修改图片尺寸和大小的网站，很方便，可以把自己喜欢的图片修改成适合的大小和尺寸然后就可以放在自己的博客上了。</p><p>找不到的话我这里放一个我搜到的，能用的，每天免费修改20次，每个浏览器单独计算次数（不登录的话）。<a href="https://www.gaitubao.com/">改图宝 - 在线修改照片大小尺寸工具 (gaitubao.com)</a></p><h4 id="图标（待做）"><a href="#图标（待做）" class="headerlink" title="图标（待做）"></a>图标（待做）</h4><p>我尝试把自己的图片替换主题文件里面的网站图片与logo，但是都无法正常显示。等我能正常更换了再来更新。</p><h4 id="RSS订阅"><a href="#RSS订阅" class="headerlink" title="RSS订阅"></a>RSS订阅</h4><p>这个功能不知道有什么问题，我按照主题的教程，一步一步开启RSS订阅，但是点击之后打开了一个新的页面（显示了一堆源码），功能无法正常使用。</p><p><img src="https://gitee.com/Lycheecutest/imgs/raw/master/blog/hexo3.png" alt="RSS订阅"></p><h4 id="TypeError"><a href="#TypeError" class="headerlink" title="TypeError"></a>TypeError</h4><p>Prism.languages.typescript.keyword.push is not a function</p><p>报错显示了一堆node_modules里面的Jscript文件信息</p><p><img src="https://gitee.com/Lycheecutest/imgs/raw/master/blog/TypeError.png" alt="报错信息"></p><p>多次控制变量后找出了问题所在，就是我在我的新博客里面使用了<strong>yaml代码块</strong>导致的，具体愿意不清楚，只要不使用<strong>yaml代码块</strong>就没有问题。</p><p>但是使用yml又没有问题。</p><p><img src="https://gitee.com/Lycheecutest/imgs/raw/master/blog/yml.png" alt=".yml代码块"></p><p><img src="https://gitee.com/Lycheecutest/imgs/raw/master/blog/yaml.png" alt=".yaml代码块"></p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> Hexo </tag>
            
            <tag> Matery主题美化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>thymeleaf</title>
      <link href="/2022/03/01/thymeleaf/"/>
      <url>/2022/03/01/thymeleaf/</url>
      
        <content type="html"><![CDATA[<h3 id="表达式"><a href="#表达式" class="headerlink" title="表达式"></a>表达式</h3><h4 id="1-1-标准变量表达式"><a href="#1-1-标准变量表达式" class="headerlink" title="1.1 标准变量表达式"></a>1.1 标准变量表达式</h4><ul><li>语法：**${…}**</li><li>说明：Thymeleaf 中的变量表达式使用 {变量名} 的方式获取 Controller 中 model 其中的数据</li><li>th:text &#x3D; “${变量名}”</li></ul><hr><h4 id="1-2-访问Request作用域中的值"><a href="#1-2-访问Request作用域中的值" class="headerlink" title="1.2 访问Request作用域中的值"></a>1.2 访问Request作用域中的值</h4><ul><li>假设request作用域中存在键值对：**”key”&#x3D;value**可以使用标准变量表达式</li><li>语法：**${Key}**</li><li>注意：<ul><li>因为Model中的值本质上是在request作用域中存储的，所以两者的取值方法可以混用</li><li>有些标准变量表达式在IDEA中可能会报错，但是在运行时依旧可以取到值</li></ul></li></ul><hr><h4 id="1-3-访问Session会话作用域中的值"><a href="#1-3-访问Session会话作用域中的值" class="headerlink" title="1.3  访问Session会话作用域中的值"></a>1.3  访问Session会话作用域中的值</h4><ul><li>假设Session作用域中存在键值对：**”key”&#x3D;value**可以使用标准变量表达式</li><li>语法：**${session.key}**</li></ul><hr><h4 id="1-4-访问Application全局作用域中的值"><a href="#1-4-访问Application全局作用域中的值" class="headerlink" title="1.4 访问Application全局作用域中的值"></a>1.4 访问Application全局作用域中的值</h4><ul><li>假设Application作用域中存在键值对：**”key”&#x3D;value**可以使用标准变量表达式</li><li>语法：**${application.key}**</li></ul><hr><h4 id="1-5空值处理"><a href="#1-5空值处理" class="headerlink" title="1.5空值处理"></a>1.5空值处理</h4><ul><li>语法：**${对象名？.属性名}**</li><li>如果一个对象<strong>可能</strong>为 null 时，并且要<strong>获取该对象的属性</strong>时，这时需要在该对象后面加一个”<code>?</code>“，当一个为 null 的对象去获取一个属性时，会报<code>TemplateInputException</code>（模板输入&#x2F;解析异常）</li></ul><hr><h4 id="2-1-选择变量表达式"><a href="#2-1-选择变量表达式" class="headerlink" title="2.1 选择变量表达式"></a>2.1 选择变量表达式</h4><ul><li><p>语法：**${…}**</p></li><li><p>说明：选择变量表达式，也叫星号变量表达式，使用 <code>th:object</code> 属性来绑定对象；也可以不使用 <code>th:object</code> 属性来绑定对象，则使用方法与${}相同</p></li><li><p>使用</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">th:</span>object</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;user&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    用户编号：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>*&#123;id&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>    用户姓名：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>*&#123;name&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><hr><h4 id="2-2-URL表达式"><a href="#2-2-URL表达式" class="headerlink" title="2.2 URL表达式"></a>2.2 URL表达式</h4><ul><li><p>语法：**@{….}**</p></li><li><p>说明：主要用于链接、地址的展示， 可用于<code>&lt;script src=&quot;...&quot;&gt;</code>、 <code>&lt;link href=&quot;...&quot;&gt;</code>、 <code>&lt;a href=&quot;...&quot;&gt;</code>、 <code>&lt;form action=&quot;...&quot;&gt;</code>、 <code>&lt;img src=&quot;&quot;&gt;</code>等，可以在 URL 路径中动态获取数据</p></li><li><p>使用</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>绝对路径<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@&#123;http://localhost:8080/thymeleaf/info&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>绝对路径<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@&#123;<span class="token punctuation">'</span>http://localhost:8080/thymeleaf/user/info?id=<span class="token punctuation">'</span>+$&#123;user.id&#125;&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>绝对路径(带参数)<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>相对路径，常用<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@&#123;/thymeleaf/info&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>相对路径<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@&#123;<span class="token punctuation">'</span>/thymeleaf/user/info?id=<span class="token punctuation">'</span> + $&#123;user.id&#125;&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>相对路径（带参数）（字符串拼接） <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@&#123;/thymeleaf/info(id=$&#123;user.id&#125;, name=$&#123;user.name&#125;)&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>推荐：带多个参数路径写法<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><hr><h3 id="常见属性"><a href="#常见属性" class="headerlink" title="常见属性"></a>常见属性</h3><h4 id="1-th-action"><a href="#1-th-action" class="headerlink" title="1. th:action"></a>1. th:action</h4><ul><li><code>th:action</code>：定义后台控制器的路径，类似<code>&lt;form&gt;</code>标签的 action 属性，主要结合 URL 表达式,获取动态变量</li></ul><h4 id="2-th-method"><a href="#2-th-method" class="headerlink" title="2.th:method"></a>2.th:method</h4><ul><li>设置请求方法</li></ul><hr><h4 id="3-th-href"><a href="#3-th-href" class="headerlink" title="3. th:href"></a>3. th:href</h4><ul><li>定义超链接， 主要结合 URL 表达式,获取动态变量</li></ul><hr><h4 id="4-th-src"><a href="#4-th-src" class="headerlink" title="4. th:src"></a>4. th:src</h4><ul><li><p>用于外部资源引入，比如<code>&lt;script&gt;</code>标签的 src 属性， <code>&lt;img&gt;</code>标签的 src 属性，常与@{}表达式结合使用。</p><p>SpringBoot 项目的静态资源都放到 resources 的 static 目录下。放到 static 路径下的内容，写路径时不需要写上 static。</p></li><li><p>&#96;&#96;&#96;html</p><!--以下方式无法引入 js--><script src="/static/js/jquery-1.7.2.min.js"></script><!--该方法是常用方法--><script type="text/javascript" th:src="@{/jquery-1.7.2.min.js}"></script><pre class="line-numbers language-none"><code class="language-none">---#### 5. th:id&#x2F;name&#x2F;value- 替换 html 标签中的 id，name，value 属性---#### 6. th:attr- 该属性也是用于给 HTML 中某元素的某属性赋值，好处是可以给 html 中没有定义的属性动态的赋值。- 使用：  &#96;&#96;&#96;html  &lt;span zhangsan&#x3D;&quot;$&#123;user.name&#125;&quot;&gt;该方法赋值不成功&lt;&#x2F;span&gt;    &lt;!--通过 th:attr 对自定义的属性赋值--&gt;  &lt;span th:attr&#x3D;&quot;zhangsan&#x3D;$&#123;user.name&#125;&quot;&gt;可以赋值成功&lt;&#x2F;span&gt;  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><hr><h4 id="7-th-text"><a href="#7-th-text" class="headerlink" title="7. th:text"></a>7. th:text</h4><ul><li>用于文本的显示，该属性显示的文本在标签体中，即两个标签对之间。如果是表单标签，使用<code>th:value</code></li></ul><hr><h4 id="8-th-object"><a href="#8-th-object" class="headerlink" title="8. th:object"></a>8. th:object</h4><ul><li>用于数据对象绑定，通常用于选择变量表达式（星号表达式）</li></ul><hr><h4 id="9-th-onclick"><a href="#9-th-onclick" class="headerlink" title="9.  th:onclick"></a>9.  th:onclick</h4><ul><li><p>目前thymeleaf版本要求智能传递数字和布尔值</p></li><li><p>使用:</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!--目前 thymeleaf 版本要求只能传递数字和布尔值--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">th:</span>onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">'</span>show(<span class="token punctuation">'</span> + $&#123;user.id&#125; + <span class="token punctuation">'</span>)<span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>点击：显示学生编号<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><script type="text/javascript">      function show(id) {          alert("用户编号为： " + id);      }  </script>  <pre class="line-numbers language-none"><code class="language-none">    ---#### 10. th:inline- ---#### 11. th:fragment  &#x2F;  include  &#x2F;  replace- **th:fragment**- 用于页面指定一个通用（复用）的代码片段，例如在页面&#96;common&#x2F;view1.html&#96;中有如下定义：- &#96;&#96;&#96;html  &lt;div th:fragment&#x3D;&quot;pageHead&quot;&gt;  一些代码，比如说同一个网站每个页面的头和尾都相同，将公共的代码抽取出来写在这里  &lt;&#x2F;div&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><ul><li><p><strong>th:include</strong></p></li><li><p>在页面中引入 <strong>th:fragment</strong>定义的代码片段</p></li><li><p>使用格式：</p><p><strong>th:included&#x3D;”view :: selector” : “::”</strong> 前面是模板文件名，后面是选择器</p><p><strong>::selector:</strong> 只写选择器，这里指的就是<strong>fragment</strong>名称，则加载本页面对应的fragment</p><p><strong>view</strong>或者<strong>view：HTML</strong>： 只写模板文件名或者使用html标签，则加载整个页面</p></li><li><p>比如：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">th:</span>included</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>common/view1::pageHead<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><hr><ul><li><p><strong>th:replace</strong></p></li><li><p>th:replace 和 th:included 都是加载代码块内容，但是还是有所不同</p></li><li><p><strong>th:replace</strong> 替换当前标签为模板中的标签，加载的节点会整个替换掉加载它的div</p></li><li><p><strong>th:include</strong> 加载模板的内容：读取加载节点的内容【不包含节点名称】，替换div内容</p></li><li><p>比如：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!-- th:fragment 定义用于加载的块 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name"><span class="token namespace">th:</span>fragment</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>view<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> 这是公共部分<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>引用时：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">include：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">th:</span>include</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pagination::view<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>replace：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">th:</span>replace</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pagination::view<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>结果如下：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">include：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>这是公共部分<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>replace：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>这是公共部分<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><hr><h3 id="条件与循环"><a href="#条件与循环" class="headerlink" title="条件与循环"></a>条件与循环</h3><h4 id="1-th-each"><a href="#1-th-each" class="headerlink" title="1. th:each"></a>1. th:each</h4><ul><li><p>这个属性非常常用，比如从后台传来一个对象集合，那么就可以使用此属性遍历输出，它与<strong>JSTL</strong>中的**&lt;c: forEach&gt;**类似。此属性既可以循环遍历集合，也可以循环遍历数组及Map。</p></li><li><p>语法：<strong>th:each&#x3D;”user, iterStat : ${userList}”</strong></p><p>​          <strong>th:each&#x3D;”user : ${userList}”</strong></p><ul><li>第一个参数：定义变量，接收集合中的一个元素</li><li>第二个参数：记录循环体信息，也可以不定义，则默认变量名位迭代变量名加上Stat后缀，即userStat<ul><li>index：当前迭代对象的index（从0开始）</li><li>count：当前迭代对象的个数（从1开始）</li><li>size：被迭代对象的大小</li><li>current：当前迭代变量</li><li>even&#x2F;odd：布尔值，当前循环是否是偶数&#x2F;奇数（从0开始）</li><li>first：布尔值，当前循环是否是第一个</li><li>last：布尔值，当前循环是否是最后一个</li></ul></li><li>第三个参数：后台传回来的数据</li><li>第一个参数和第二个参数用<strong>，</strong>隔开，第二个参数和第三个参数用<strong>：</strong>隔开</li></ul></li><li><p>举例：</p><pre class="line-numbers language-heml" data-language="heml"><code class="language-heml">&lt;h1&gt;遍历集合或者数组&lt;&#x2F;h1&gt;&lt;div th:each&#x3D;&quot;user,userStat:$&#123;userList&#125;&quot;&gt;&lt;span th:text&#x3D;&quot;$&#123;userStat.index&#125;&quot;&gt;&lt;&#x2F;span&gt;&lt;span th:text&#x3D;&quot;$&#123;user.id&#125;&quot;&gt;&lt;&#x2F;span&gt;&lt;span th:text&#x3D;&quot;$&#123;user.name&#125;&quot;&gt;&lt;&#x2F;span&gt;&lt;&#x2F;div&gt;&lt;h1&gt;遍历map，每个元素就是一个键值对，通过key和value来取出键或者值&lt;&#x2F;h1&gt;&lt;tr th:each&#x3D;&quot;userMap:$&#123;userMaps&#125;&quot;&gt;    &lt;td th:text&#x3D;&quot;$&#123;userMap.key&#125;&quot;&gt;&lt;&#x2F;td&gt;    &lt;td th:text&#x3D;&quot;$&#123;userMap.value&#125;&quot;&gt;&lt;&#x2F;td&gt;    &lt;td th:text&#x3D;&quot;$&#123;userMap.value.name&#125;&quot;&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><hr><h4 id="2-th-if-x2F-th-unless"><a href="#2-th-if-x2F-th-unless" class="headerlink" title="2. th:if &#x2F; th: unless"></a>2. th:if &#x2F; th: unless</h4><ul><li><p>th:if是条件满足执行，th:unless相反，条件不满足时执行</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!--sex等于1则显示男，sex等于0则显示女--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">th:</span>if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;sex eq 1&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>男： <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">th:</span>if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;sex eq 0&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>女： <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><hr><h4 id="3-th-switch-x2F-th-case"><a href="#3-th-switch-x2F-th-case" class="headerlink" title="3. th:switch &#x2F; th: case"></a>3. th:switch &#x2F; th: case</h4><ul><li><p>一旦某个case判断值为true，剩余的case默认不执行。**” * “** 表示默认显示的case，前面的case都不匹配的时候，执行默认</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>th:switch/th:case 用法<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">th:</span>switch</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;sex&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name"><span class="token namespace">th:</span>case</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>性别：男<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name"><span class="token namespace">th:</span>case</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>性别：女<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name"><span class="token namespace">th:</span>case</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>*<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>性别：保密<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> -前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> thymeleaf </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
